Employee(emp_id, emp_name, salary, designation) 
Salary_Backup(emp_id, old_salary, new_salary, salary_difference) 
Create a Trigger to record salary change of the employee. Whenever salary is updated insert the details in 
Salary_Backup table. 
Create a Trigger that will prevent deleting the employee record having designation as CEO. 

#####################################################

CREATE TABLE Employee (
  emp_id INT PRIMARY KEY,
  emp_name VARCHAR(255),
  salary DECIMAL(10, 2),
  designation VARCHAR(50)
);


INSERT ALL
  INTO Employee (emp_id, emp_name, salary, designation) VALUES (1, 'Tanvi Ingale', 60000.00, 'Manager')
  INTO Employee (emp_id, emp_name, salary, designation) VALUES (2, 'Riya Ahire', 75000.00, 'Engineer')
  INTO Employee (emp_id, emp_name, salary, designation) VALUES (3, 'Milonee Vyas', 90000.00, 'CEO')
  INTO Employee (emp_id, emp_name, salary, designation) VALUES (4, 'Shreya Gupta', 55000.00, 'Analyst')
  INTO Employee (emp_id, emp_name, salary, designation) VALUES (5, 'Sachin Yadav', 68000.00, 'Engineer')
SELECT * FROM dual;



CREATE TABLE Salary_Backup (
  emp_id INT,
  old_salary DECIMAL(10, 2),
  new_salary DECIMAL(10, 2),
  salary_difference DECIMAL(10, 2),
  change_date TIMESTAMP
);



CREATE OR REPLACE TRIGGER SalaryChangeTrigger
BEFORE UPDATE ON Employee
FOR EACH ROW
BEGIN
  IF :NEW.salary <> :OLD.salary THEN
    INSERT INTO Salary_Backup (emp_id, old_salary, new_salary, salary_difference, change_date)
    VALUES (:OLD.emp_id, :OLD.salary, :NEW.salary, :NEW.salary - :OLD.salary, SYSDATE);
  END IF;
END;

UPDATE Employee
SET salary = 65000.00
WHERE emp_id = 2;


CREATE OR REPLACE TRIGGER PreventCEODeletionTrigger
BEFORE DELETE ON Employee
FOR EACH ROW
DECLARE
BEGIN
  IF :OLD.designation = 'CEO' THEN
    RAISE_APPLICATION_ERROR(-20001, 'Cannot delete CEO record.');
  END IF;
END;

--delete CEO
DELETE FROM Employee
WHERE emp_id = 3; 

DELETE FROM Employee
WHERE emp_id = 4;
